/**
 * Flowtype definitions for cardano_message_signing
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.16.1
 * @flow
 */

/**
 */

declare export var LabelKind: {|
  +Int: 0, // 0
  +Text: 1, // 1
|};

/**
 */

declare export var SignedMessageKind: {|
  +COSESIGN: 0, // 0
  +COSESIGN1: 1, // 1
|};

/**
 */

declare export var SigContext: {|
  +Signature: 0, // 0
  +Signature1: 1, // 1
  +CounterSignature: 2, // 2
|};

/**
 */

declare export var CBORSpecialType: {|
  +Bool: 0, // 0
  +Float: 1, // 1
  +Unassigned: 2, // 2
  +Break: 3, // 3
  +Undefined: 4, // 4
  +Null: 5, // 5
|};

/**
 */

declare export var CBORValueKind: {|
  +Int: 0, // 0
  +Bytes: 1, // 1
  +Text: 2, // 2
  +Array: 3, // 3
  +Object: 4, // 4
  +TaggedCBOR: 5, // 5
  +Special: 6, // 6
|};

/**
 */

declare export var AlgorithmId: {|
  +EdDSA: 0, // 0
  +ChaCha20Poly1305: 1, // 1
|};

/**
 */

declare export var KeyType: {|
  +OKP: 0, // 0
  +EC2: 1, // 1
  +Symmetric: 2, // 2
|};

/**
 */

declare export var ECKey: {|
  +CRV: 0, // 0
  +X: 1, // 1
  +Y: 2, // 2
  +D: 3, // 3
|};

/**
 */

declare export var CurveType: {|
  +P256: 0, // 0
  +P384: 1, // 1
  +P521: 2, // 2
  +X25519: 3, // 3
  +X448: 4, // 4
  +Ed25519: 5, // 5
  +Ed448: 6, // 6
|};

/**
 */

declare export var KeyOperation: {|
  +Sign: 0, // 0
  +Verify: 1, // 1
  +Encrypt: 2, // 2
  +Decrypt: 3, // 3
  +WrapKey: 4, // 4
  +UnwrapKey: 5, // 5
  +DeriveKey: 6, // 6
  +DeriveBits: 7, // 7
|};

/**
 */
declare export class BigNum {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {BigNum}
   */
  static from_bytes(bytes: Uint8Array): BigNum;

  /**
   * @param {string} string
   * @returns {BigNum}
   */
  static from_str(string: string): BigNum;

  /**
   * @returns {string}
   */
  to_str(): string;

  /**
   * @param {BigNum} other
   * @returns {BigNum}
   */
  checked_mul(other: BigNum): BigNum;

  /**
   * @param {BigNum} other
   * @returns {BigNum}
   */
  checked_add(other: BigNum): BigNum;

  /**
   * @param {BigNum} other
   * @returns {BigNum}
   */
  checked_sub(other: BigNum): BigNum;
}
/**
 */
declare export class CBORArray {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {CBORArray}
   */
  static from_bytes(bytes: Uint8Array): CBORArray;

  /**
   * @returns {CBORArray}
   */
  static new(): CBORArray;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {CBORValue}
   */
  get(index: number): CBORValue;

  /**
   * @param {CBORValue} elem
   */
  add(elem: CBORValue): void;

  /**
   * @param {boolean} use_definite
   */
  set_definite_encoding(use_definite: boolean): void;

  /**
   * @returns {boolean}
   */
  is_definite(): boolean;
}
/**
 */
declare export class CBORObject {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {CBORObject}
   */
  static from_bytes(bytes: Uint8Array): CBORObject;

  /**
   * @returns {CBORObject}
   */
  static new(): CBORObject;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {CBORValue} key
   * @param {CBORValue} value
   * @returns {CBORValue | void}
   */
  insert(key: CBORValue, value: CBORValue): CBORValue | void;

  /**
   * @param {CBORValue} key
   * @returns {CBORValue | void}
   */
  get(key: CBORValue): CBORValue | void;

  /**
   * @returns {CBORArray}
   */
  keys(): CBORArray;

  /**
   * @param {boolean} use_definite
   */
  set_definite_encoding(use_definite: boolean): void;

  /**
   * @returns {boolean}
   */
  is_definite(): boolean;
}
/**
 */
declare export class CBORSpecial {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {CBORSpecial}
   */
  static from_bytes(bytes: Uint8Array): CBORSpecial;

  /**
   * @param {boolean} b
   * @returns {CBORSpecial}
   */
  static new_bool(b: boolean): CBORSpecial;

  /**
   * @param {number} u
   * @returns {CBORSpecial}
   */
  static new_unassigned(u: number): CBORSpecial;

  /**
   * @returns {CBORSpecial}
   */
  static new_break(): CBORSpecial;

  /**
   * @returns {CBORSpecial}
   */
  static new_null(): CBORSpecial;

  /**
   * @returns {CBORSpecial}
   */
  static new_undefined(): CBORSpecial;

  /**
   * @returns {number}
   */
  kind(): number;

  /**
   * @returns {boolean | void}
   */
  as_bool(): boolean | void;

  /**
   * @returns {number | void}
   */
  as_float(): number | void;

  /**
   * @returns {number | void}
   */
  as_unassigned(): number | void;
}
/**
 */
declare export class CBORValue {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {CBORValue}
   */
  static from_bytes(bytes: Uint8Array): CBORValue;

  /**
   * @param {Int} int
   * @returns {CBORValue}
   */
  static new_int(int: Int): CBORValue;

  /**
   * @param {Uint8Array} bytes
   * @returns {CBORValue}
   */
  static new_bytes(bytes: Uint8Array): CBORValue;

  /**
   * @param {string} text
   * @returns {CBORValue}
   */
  static new_text(text: string): CBORValue;

  /**
   * @param {CBORArray} arr
   * @returns {CBORValue}
   */
  static new_array(arr: CBORArray): CBORValue;

  /**
   * @param {CBORObject} obj
   * @returns {CBORValue}
   */
  static new_object(obj: CBORObject): CBORValue;

  /**
   * @param {TaggedCBOR} tagged
   * @returns {CBORValue}
   */
  static new_tagged(tagged: TaggedCBOR): CBORValue;

  /**
   * @param {CBORSpecial} special
   * @returns {CBORValue}
   */
  static new_special(special: CBORSpecial): CBORValue;

  /**
   * @param {Label} label
   * @returns {CBORValue}
   */
  static from_label(label: Label): CBORValue;

  /**
   * @returns {number}
   */
  kind(): number;

  /**
   * @returns {Int | void}
   */
  as_int(): Int | void;

  /**
   * @returns {Uint8Array | void}
   */
  as_bytes(): Uint8Array | void;

  /**
   * @returns {string | void}
   */
  as_text(): string | void;

  /**
   * @returns {CBORArray | void}
   */
  as_array(): CBORArray | void;

  /**
   * @returns {CBORObject | void}
   */
  as_object(): CBORObject | void;

  /**
   * @returns {TaggedCBOR | void}
   */
  as_tagged(): TaggedCBOR | void;

  /**
   * @returns {CBORSpecial | void}
   */
  as_special(): CBORSpecial | void;
}
/**
 */
declare export class COSEEncrypt {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {COSEEncrypt}
   */
  static from_bytes(bytes: Uint8Array): COSEEncrypt;

  /**
   * @returns {Headers}
   */
  headers(): Headers;

  /**
   * @returns {Uint8Array | void}
   */
  ciphertext(): Uint8Array | void;

  /**
   * @returns {COSERecipients}
   */
  recipients(): COSERecipients;

  /**
   * @param {Headers} headers
   * @param {Uint8Array | void} ciphertext
   * @param {COSERecipients} recipients
   * @returns {COSEEncrypt}
   */
  static new(
    headers: Headers,
    ciphertext: Uint8Array | void,
    recipients: COSERecipients
  ): COSEEncrypt;
}
/**
 */
declare export class COSEEncrypt0 {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {COSEEncrypt0}
   */
  static from_bytes(bytes: Uint8Array): COSEEncrypt0;

  /**
   * @returns {Headers}
   */
  headers(): Headers;

  /**
   * @returns {Uint8Array | void}
   */
  ciphertext(): Uint8Array | void;

  /**
   * @param {Headers} headers
   * @param {Uint8Array | void} ciphertext
   * @returns {COSEEncrypt0}
   */
  static new(headers: Headers, ciphertext?: Uint8Array): COSEEncrypt0;
}
/**
 */
declare export class COSEKey {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {COSEKey}
   */
  static from_bytes(bytes: Uint8Array): COSEKey;

  /**
   * @param {Label} key_type
   */
  set_key_type(key_type: Label): void;

  /**
   * @returns {Label}
   */
  key_type(): Label;

  /**
   * @param {Uint8Array} key_id
   */
  set_key_id(key_id: Uint8Array): void;

  /**
   * @returns {Uint8Array | void}
   */
  key_id(): Uint8Array | void;

  /**
   * @param {Label} algorithm_id
   */
  set_algorithm_id(algorithm_id: Label): void;

  /**
   * @returns {Label | void}
   */
  algorithm_id(): Label | void;

  /**
   * @param {Labels} key_ops
   */
  set_key_ops(key_ops: Labels): void;

  /**
   * @returns {Labels | void}
   */
  key_ops(): Labels | void;

  /**
   * @param {Uint8Array} base_init_vector
   */
  set_base_init_vector(base_init_vector: Uint8Array): void;

  /**
   * @returns {Uint8Array | void}
   */
  base_init_vector(): Uint8Array | void;

  /**
   * @param {Label} label
   * @returns {CBORValue | void}
   */
  header(label: Label): CBORValue | void;

  /**
   * @param {Label} label
   * @param {CBORValue} value
   */
  set_header(label: Label, value: CBORValue): void;

  /**
   * @param {Label} key_type
   * @returns {COSEKey}
   */
  static new(key_type: Label): COSEKey;
}
/**
 */
declare export class COSERecipient {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {COSERecipient}
   */
  static from_bytes(bytes: Uint8Array): COSERecipient;

  /**
   * @returns {Headers}
   */
  headers(): Headers;

  /**
   * @returns {Uint8Array | void}
   */
  ciphertext(): Uint8Array | void;

  /**
   * @param {Headers} headers
   * @param {Uint8Array | void} ciphertext
   * @returns {COSERecipient}
   */
  static new(headers: Headers, ciphertext?: Uint8Array): COSERecipient;
}
/**
 */
declare export class COSERecipients {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {COSERecipients}
   */
  static from_bytes(bytes: Uint8Array): COSERecipients;

  /**
   * @returns {COSERecipients}
   */
  static new(): COSERecipients;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {COSERecipient}
   */
  get(index: number): COSERecipient;

  /**
   * @param {COSERecipient} elem
   */
  add(elem: COSERecipient): void;
}
/**
 */
declare export class COSESign {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {COSESign}
   */
  static from_bytes(bytes: Uint8Array): COSESign;

  /**
   * @returns {Headers}
   */
  headers(): Headers;

  /**
   * @returns {Uint8Array | void}
   */
  payload(): Uint8Array | void;

  /**
   * @returns {COSESignatures}
   */
  signatures(): COSESignatures;

  /**
   * @param {Headers} headers
   * @param {Uint8Array | void} payload
   * @param {COSESignatures} signatures
   * @returns {COSESign}
   */
  static new(
    headers: Headers,
    payload: Uint8Array | void,
    signatures: COSESignatures
  ): COSESign;
}
/**
 */
declare export class COSESign1 {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {COSESign1}
   */
  static from_bytes(bytes: Uint8Array): COSESign1;

  /**
   * @returns {Headers}
   */
  headers(): Headers;

  /**
   * @returns {Uint8Array | void}
   */
  payload(): Uint8Array | void;

  /**
   * @returns {Uint8Array}
   */
  signature(): Uint8Array;

  /**
   * For verifying, we will want to reverse-construct this SigStructure to check the signature against
   * # Arguments
   * * `external_aad` - External application data - see RFC 8152 section 4.3. Set to None if not using this.
   * @param {Uint8Array | void} external_aad
   * @param {Uint8Array | void} external_payload
   * @returns {SigStructure}
   */
  signed_data(
    external_aad?: Uint8Array,
    external_payload?: Uint8Array
  ): SigStructure;

  /**
   * @param {Headers} headers
   * @param {Uint8Array | void} payload
   * @param {Uint8Array} signature
   * @returns {COSESign1}
   */
  static new(
    headers: Headers,
    payload: Uint8Array | void,
    signature: Uint8Array
  ): COSESign1;
}
/**
 */
declare export class COSESign1Builder {
  free(): void;

  /**
   * @param {Headers} headers
   * @param {Uint8Array} payload
   * @param {boolean} is_payload_external
   * @returns {COSESign1Builder}
   */
  static new(
    headers: Headers,
    payload: Uint8Array,
    is_payload_external: boolean
  ): COSESign1Builder;

  /**
   */
  hash_payload(): void;

  /**
   * @param {Uint8Array} external_aad
   */
  set_external_aad(external_aad: Uint8Array): void;

  /**
   * @returns {SigStructure}
   */
  make_data_to_sign(): SigStructure;

  /**
   * @param {Uint8Array} signed_sig_structure
   * @returns {COSESign1}
   */
  build(signed_sig_structure: Uint8Array): COSESign1;
}
/**
 */
declare export class COSESignBuilder {
  free(): void;

  /**
   * @param {Headers} headers
   * @param {Uint8Array} payload
   * @param {boolean} is_payload_external
   * @returns {COSESignBuilder}
   */
  static new(
    headers: Headers,
    payload: Uint8Array,
    is_payload_external: boolean
  ): COSESignBuilder;

  /**
   */
  hash_payload(): void;

  /**
   * @param {Uint8Array} external_aad
   */
  set_external_aad(external_aad: Uint8Array): void;

  /**
   * @returns {SigStructure}
   */
  make_data_to_sign(): SigStructure;

  /**
   * @param {COSESignatures} signed_sig_structure
   * @returns {COSESign}
   */
  build(signed_sig_structure: COSESignatures): COSESign;
}
/**
 */
declare export class COSESignature {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {COSESignature}
   */
  static from_bytes(bytes: Uint8Array): COSESignature;

  /**
   * @returns {Headers}
   */
  headers(): Headers;

  /**
   * @returns {Uint8Array}
   */
  signature(): Uint8Array;

  /**
   * @param {Headers} headers
   * @param {Uint8Array} signature
   * @returns {COSESignature}
   */
  static new(headers: Headers, signature: Uint8Array): COSESignature;
}
/**
 */
declare export class COSESignatures {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {COSESignatures}
   */
  static from_bytes(bytes: Uint8Array): COSESignatures;

  /**
   * @returns {COSESignatures}
   */
  static new(): COSESignatures;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {COSESignature}
   */
  get(index: number): COSESignature;

  /**
   * @param {COSESignature} elem
   */
  add(elem: COSESignature): void;
}
/**
 */
declare export class CounterSignature {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {CounterSignature}
   */
  static from_bytes(bytes: Uint8Array): CounterSignature;

  /**
   * @param {COSESignature} cose_signature
   * @returns {CounterSignature}
   */
  static new_single(cose_signature: COSESignature): CounterSignature;

  /**
   * @param {COSESignatures} cose_signatures
   * @returns {CounterSignature}
   */
  static new_multi(cose_signatures: COSESignatures): CounterSignature;

  /**
   * @returns {COSESignatures}
   */
  signatures(): COSESignatures;
}
/**
 */
declare export class EdDSA25519Key {
  free(): void;

  /**
   * @param {Uint8Array} pubkey_bytes
   * @returns {EdDSA25519Key}
   */
  static new(pubkey_bytes: Uint8Array): EdDSA25519Key;

  /**
   * @param {Uint8Array} private_key_bytes
   */
  set_private_key(private_key_bytes: Uint8Array): void;

  /**
   */
  is_for_signing(): void;

  /**
   */
  is_for_verifying(): void;

  /**
   * @returns {COSEKey}
   */
  build(): COSEKey;
}
/**
 */
declare export class HeaderMap {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {HeaderMap}
   */
  static from_bytes(bytes: Uint8Array): HeaderMap;

  /**
   * @param {Label} algorithm_id
   */
  set_algorithm_id(algorithm_id: Label): void;

  /**
   * @returns {Label | void}
   */
  algorithm_id(): Label | void;

  /**
   * @param {Labels} criticality
   */
  set_criticality(criticality: Labels): void;

  /**
   * @returns {Labels | void}
   */
  criticality(): Labels | void;

  /**
   * @param {Label} content_type
   */
  set_content_type(content_type: Label): void;

  /**
   * @returns {Label | void}
   */
  content_type(): Label | void;

  /**
   * @param {Uint8Array} key_id
   */
  set_key_id(key_id: Uint8Array): void;

  /**
   * @returns {Uint8Array | void}
   */
  key_id(): Uint8Array | void;

  /**
   * @param {Uint8Array} init_vector
   */
  set_init_vector(init_vector: Uint8Array): void;

  /**
   * @returns {Uint8Array | void}
   */
  init_vector(): Uint8Array | void;

  /**
   * @param {Uint8Array} partial_init_vector
   */
  set_partial_init_vector(partial_init_vector: Uint8Array): void;

  /**
   * @returns {Uint8Array | void}
   */
  partial_init_vector(): Uint8Array | void;

  /**
   * @param {CounterSignature} counter_signature
   */
  set_counter_signature(counter_signature: CounterSignature): void;

  /**
   * @returns {CounterSignature | void}
   */
  counter_signature(): CounterSignature | void;

  /**
   * @param {Label} label
   * @returns {CBORValue | void}
   */
  header(label: Label): CBORValue | void;

  /**
   * @param {Label} label
   * @param {CBORValue} value
   */
  set_header(label: Label, value: CBORValue): void;

  /**
   * @returns {Labels}
   */
  keys(): Labels;

  /**
   * @returns {HeaderMap}
   */
  static new(): HeaderMap;
}
/**
 */
declare export class Headers {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Headers}
   */
  static from_bytes(bytes: Uint8Array): Headers;

  /**
   * @returns {ProtectedHeaderMap}
   */
  protected(): ProtectedHeaderMap;

  /**
   * @returns {HeaderMap}
   */
  unprotected(): HeaderMap;

  /**
   * @param {ProtectedHeaderMap} protected_
   * @param {HeaderMap} unprotected_
   * @returns {Headers}
   */
  static new(protected_: ProtectedHeaderMap, unprotected_: HeaderMap): Headers;
}
/**
 */
declare export class Int {
  free(): void;

  /**
   * @param {BigNum} x
   * @returns {Int}
   */
  static new(x: BigNum): Int;

  /**
   * @param {BigNum} x
   * @returns {Int}
   */
  static new_negative(x: BigNum): Int;

  /**
   * @param {number} x
   * @returns {Int}
   */
  static new_i32(x: number): Int;

  /**
   * @returns {boolean}
   */
  is_positive(): boolean;

  /**
   * @returns {BigNum | void}
   */
  as_positive(): BigNum | void;

  /**
   * @returns {BigNum | void}
   */
  as_negative(): BigNum | void;

  /**
   * @returns {number | void}
   */
  as_i32(): number | void;
}
/**
 */
declare export class Label {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Label}
   */
  static from_bytes(bytes: Uint8Array): Label;

  /**
   * @param {Int} int
   * @returns {Label}
   */
  static new_int(int: Int): Label;

  /**
   * @param {string} text
   * @returns {Label}
   */
  static new_text(text: string): Label;

  /**
   * @returns {number}
   */
  kind(): number;

  /**
   * @returns {Int | void}
   */
  as_int(): Int | void;

  /**
   * @returns {string | void}
   */
  as_text(): string | void;

  /**
   * @param {number} id
   * @returns {Label}
   */
  static from_algorithm_id(id: number): Label;

  /**
   * @param {number} key_type
   * @returns {Label}
   */
  static from_key_type(key_type: number): Label;

  /**
   * @param {number} ec_key
   * @returns {Label}
   */
  static from_ec_key(ec_key: number): Label;

  /**
   * @param {number} curve_type
   * @returns {Label}
   */
  static from_curve_type(curve_type: number): Label;

  /**
   * @param {number} key_op
   * @returns {Label}
   */
  static from_key_operation(key_op: number): Label;
}
/**
 */
declare export class Labels {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Labels}
   */
  static from_bytes(bytes: Uint8Array): Labels;

  /**
   * @returns {Labels}
   */
  static new(): Labels;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {Label}
   */
  get(index: number): Label;

  /**
   * @param {Label} elem
   */
  add(elem: Label): void;
}
/**
 */
declare export class PasswordEncryption {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PasswordEncryption}
   */
  static from_bytes(bytes: Uint8Array): PasswordEncryption;

  /**
   * @param {COSEEncrypt0} data
   * @returns {PasswordEncryption}
   */
  static new(data: COSEEncrypt0): PasswordEncryption;
}
/**
 */
declare export class ProtectedHeaderMap {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ProtectedHeaderMap}
   */
  static from_bytes(bytes: Uint8Array): ProtectedHeaderMap;

  /**
   * @returns {ProtectedHeaderMap}
   */
  static new_empty(): ProtectedHeaderMap;

  /**
   * @param {HeaderMap} header_map
   * @returns {ProtectedHeaderMap}
   */
  static new(header_map: HeaderMap): ProtectedHeaderMap;

  /**
   * @returns {HeaderMap}
   */
  deserialized_headers(): HeaderMap;
}
/**
 */
declare export class PubKeyEncryption {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PubKeyEncryption}
   */
  static from_bytes(bytes: Uint8Array): PubKeyEncryption;

  /**
   * @param {COSEEncrypt} data
   * @returns {PubKeyEncryption}
   */
  static new(data: COSEEncrypt): PubKeyEncryption;
}
/**
 */
declare export class SigStructure {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {SigStructure}
   */
  static from_bytes(bytes: Uint8Array): SigStructure;

  /**
   * @returns {number}
   */
  context(): number;

  /**
   * @returns {ProtectedHeaderMap}
   */
  body_protected(): ProtectedHeaderMap;

  /**
   * @returns {ProtectedHeaderMap | void}
   */
  sign_protected(): ProtectedHeaderMap | void;

  /**
   * @returns {Uint8Array}
   */
  external_aad(): Uint8Array;

  /**
   * @returns {Uint8Array}
   */
  payload(): Uint8Array;

  /**
   * @param {ProtectedHeaderMap} sign_protected
   */
  set_sign_protected(sign_protected: ProtectedHeaderMap): void;

  /**
   * @param {number} context
   * @param {ProtectedHeaderMap} body_protected
   * @param {Uint8Array} external_aad
   * @param {Uint8Array} payload
   * @returns {SigStructure}
   */
  static new(
    context: number,
    body_protected: ProtectedHeaderMap,
    external_aad: Uint8Array,
    payload: Uint8Array
  ): SigStructure;
}
/**
 */
declare export class SignedMessage {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {SignedMessage}
   */
  static from_bytes(bytes: Uint8Array): SignedMessage;

  /**
   * @param {COSESign} cose_sign
   * @returns {SignedMessage}
   */
  static new_cose_sign(cose_sign: COSESign): SignedMessage;

  /**
   * @param {COSESign1} cose_sign1
   * @returns {SignedMessage}
   */
  static new_cose_sign1(cose_sign1: COSESign1): SignedMessage;

  /**
   * @param {string} s
   * @returns {SignedMessage}
   */
  static from_user_facing_encoding(s: string): SignedMessage;

  /**
   * @returns {string}
   */
  to_user_facing_encoding(): string;

  /**
   * @returns {number}
   */
  kind(): number;

  /**
   * @returns {COSESign | void}
   */
  as_cose_sign(): COSESign | void;

  /**
   * @returns {COSESign1 | void}
   */
  as_cose_sign1(): COSESign1 | void;
}
/**
 */
declare export class TaggedCBOR {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TaggedCBOR}
   */
  static from_bytes(bytes: Uint8Array): TaggedCBOR;

  /**
   * @returns {BigNum}
   */
  tag(): BigNum;

  /**
   * @returns {CBORValue}
   */
  value(): CBORValue;

  /**
   * @param {BigNum} tag
   * @param {CBORValue} value
   * @returns {TaggedCBOR}
   */
  static new(tag: BigNum, value: CBORValue): TaggedCBOR;
}
export type InitInput =
  | RequestInfo
  | URL
  | Response
  | BufferSource
  | WebAssembly$Module;
export interface InitOutput {
  +memory: WebAssembly$Memory;
  +__wbg_protectedheadermap_free: (a: number) => void;
  +protectedheadermap_to_bytes: (a: number, b: number) => void;
  +protectedheadermap_from_bytes: (a: number, b: number) => number;
  +protectedheadermap_new_empty: () => number;
  +protectedheadermap_new: (a: number) => number;
  +protectedheadermap_deserialized_headers: (a: number) => number;
  +__wbg_label_free: (a: number) => void;
  +label_to_bytes: (a: number, b: number) => void;
  +label_from_bytes: (a: number, b: number) => number;
  +label_new_int: (a: number) => number;
  +label_new_text: (a: number, b: number) => number;
  +label_kind: (a: number) => number;
  +label_as_int: (a: number) => number;
  +label_as_text: (a: number, b: number) => void;
  +label_from_algorithm_id: (a: number) => number;
  +label_from_key_type: (a: number) => number;
  +label_from_ec_key: (a: number) => number;
  +label_from_curve_type: (a: number) => number;
  +label_from_key_operation: (a: number) => number;
  +__wbg_labels_free: (a: number) => void;
  +labels_to_bytes: (a: number, b: number) => void;
  +labels_from_bytes: (a: number, b: number) => number;
  +labels_get: (a: number, b: number) => number;
  +labels_add: (a: number, b: number) => void;
  +__wbg_cosesignatures_free: (a: number) => void;
  +cosesignatures_to_bytes: (a: number, b: number) => void;
  +cosesignatures_from_bytes: (a: number, b: number) => number;
  +cosesignatures_get: (a: number, b: number) => number;
  +cosesignatures_add: (a: number, b: number) => void;
  +countersignature_to_bytes: (a: number, b: number) => void;
  +countersignature_from_bytes: (a: number, b: number) => number;
  +countersignature_new_single: (a: number) => number;
  +countersignature_new_multi: (a: number) => number;
  +countersignature_signatures: (a: number) => number;
  +__wbg_headermap_free: (a: number) => void;
  +headermap_to_bytes: (a: number, b: number) => void;
  +headermap_from_bytes: (a: number, b: number) => number;
  +headermap_set_algorithm_id: (a: number, b: number) => void;
  +headermap_algorithm_id: (a: number) => number;
  +headermap_set_criticality: (a: number, b: number) => void;
  +headermap_criticality: (a: number) => number;
  +headermap_set_key_id: (a: number, b: number, c: number) => void;
  +headermap_key_id: (a: number, b: number) => void;
  +headermap_set_partial_init_vector: (a: number, b: number, c: number) => void;
  +headermap_partial_init_vector: (a: number, b: number) => void;
  +headermap_set_counter_signature: (a: number, b: number) => void;
  +headermap_counter_signature: (a: number) => number;
  +headermap_header: (a: number, b: number) => number;
  +headermap_set_header: (a: number, b: number, c: number) => void;
  +headermap_keys: (a: number) => number;
  +headermap_new: () => number;
  +__wbg_headers_free: (a: number) => void;
  +headers_to_bytes: (a: number, b: number) => void;
  +headers_from_bytes: (a: number, b: number) => number;
  +headers_protected: (a: number) => number;
  +headers_unprotected: (a: number) => number;
  +headers_new: (a: number, b: number) => number;
  +__wbg_cosesignature_free: (a: number) => void;
  +cosesignature_to_bytes: (a: number, b: number) => void;
  +cosesignature_from_bytes: (a: number, b: number) => number;
  +cosesignature_signature: (a: number, b: number) => void;
  +cosesignature_new: (a: number, b: number, c: number) => number;
  +__wbg_cosesign1_free: (a: number) => void;
  +cosesign1_to_bytes: (a: number, b: number) => void;
  +cosesign1_from_bytes: (a: number, b: number) => number;
  +cosesign1_signature: (a: number, b: number) => void;
  +cosesign1_signed_data: (
    a: number,
    b: number,
    c: number,
    d: number,
    e: number
  ) => number;
  +cosesign1_new: (
    a: number,
    b: number,
    c: number,
    d: number,
    e: number
  ) => number;
  +__wbg_cosesign_free: (a: number) => void;
  +cosesign_to_bytes: (a: number, b: number) => void;
  +cosesign_from_bytes: (a: number, b: number) => number;
  +cosesign_signatures: (a: number) => number;
  +cosesign_new: (a: number, b: number, c: number, d: number) => number;
  +__wbg_signedmessage_free: (a: number) => void;
  +signedmessage_to_bytes: (a: number, b: number) => void;
  +signedmessage_from_bytes: (a: number, b: number) => number;
  +signedmessage_new_cose_sign: (a: number) => number;
  +signedmessage_new_cose_sign1: (a: number) => number;
  +signedmessage_from_user_facing_encoding: (a: number, b: number) => number;
  +signedmessage_to_user_facing_encoding: (a: number, b: number) => void;
  +signedmessage_kind: (a: number) => number;
  +signedmessage_as_cose_sign: (a: number) => number;
  +signedmessage_as_cose_sign1: (a: number) => number;
  +__wbg_sigstructure_free: (a: number) => void;
  +sigstructure_to_bytes: (a: number, b: number) => void;
  +sigstructure_from_bytes: (a: number, b: number) => number;
  +sigstructure_context: (a: number) => number;
  +sigstructure_body_protected: (a: number) => number;
  +sigstructure_sign_protected: (a: number) => number;
  +sigstructure_external_aad: (a: number, b: number) => void;
  +sigstructure_payload: (a: number, b: number) => void;
  +sigstructure_set_sign_protected: (a: number, b: number) => void;
  +sigstructure_new: (
    a: number,
    b: number,
    c: number,
    d: number,
    e: number,
    f: number
  ) => number;
  +__wbg_coseencrypt0_free: (a: number) => void;
  +coseencrypt0_to_bytes: (a: number, b: number) => void;
  +coseencrypt0_from_bytes: (a: number, b: number) => number;
  +coseencrypt0_headers: (a: number) => number;
  +coseencrypt0_ciphertext: (a: number, b: number) => void;
  +coseencrypt0_new: (a: number, b: number, c: number) => number;
  +__wbg_passwordencryption_free: (a: number) => void;
  +passwordencryption_to_bytes: (a: number, b: number) => void;
  +passwordencryption_from_bytes: (a: number, b: number) => number;
  +passwordencryption_new: (a: number) => number;
  +__wbg_coserecipients_free: (a: number) => void;
  +coserecipients_to_bytes: (a: number, b: number) => void;
  +coserecipients_from_bytes: (a: number, b: number) => number;
  +coserecipients_new: () => number;
  +coserecipients_len: (a: number) => number;
  +coserecipients_get: (a: number, b: number) => number;
  +coserecipients_add: (a: number, b: number) => void;
  +__wbg_coseencrypt_free: (a: number) => void;
  +coseencrypt_to_bytes: (a: number, b: number) => void;
  +coseencrypt_from_bytes: (a: number, b: number) => number;
  +coseencrypt_recipients: (a: number) => number;
  +coseencrypt_new: (a: number, b: number, c: number, d: number) => number;
  +coserecipient_to_bytes: (a: number, b: number) => void;
  +coserecipient_from_bytes: (a: number, b: number) => number;
  +__wbg_pubkeyencryption_free: (a: number) => void;
  +pubkeyencryption_to_bytes: (a: number, b: number) => void;
  +pubkeyencryption_from_bytes: (a: number, b: number) => number;
  +pubkeyencryption_new: (a: number) => number;
  +__wbg_cosekey_free: (a: number) => void;
  +cosekey_to_bytes: (a: number, b: number) => void;
  +cosekey_from_bytes: (a: number, b: number) => number;
  +cosekey_set_key_type: (a: number, b: number) => void;
  +cosekey_key_type: (a: number) => number;
  +cosekey_set_key_id: (a: number, b: number, c: number) => void;
  +cosekey_key_id: (a: number, b: number) => void;
  +cosekey_set_algorithm_id: (a: number, b: number) => void;
  +cosekey_algorithm_id: (a: number) => number;
  +cosekey_set_key_ops: (a: number, b: number) => void;
  +cosekey_key_ops: (a: number) => number;
  +cosekey_set_base_init_vector: (a: number, b: number, c: number) => void;
  +cosekey_base_init_vector: (a: number, b: number) => void;
  +cosekey_header: (a: number, b: number) => number;
  +cosekey_set_header: (a: number, b: number, c: number) => void;
  +cosekey_new: (a: number) => number;
  +coserecipient_new: (a: number, b: number, c: number) => number;
  +headermap_content_type: (a: number) => number;
  +labels_new: () => number;
  +cosesignatures_new: () => number;
  +labels_len: (a: number) => number;
  +cosesignatures_len: (a: number) => number;
  +cosesignature_headers: (a: number) => number;
  +cosesign_headers: (a: number) => number;
  +cosesign1_headers: (a: number) => number;
  +coseencrypt_headers: (a: number) => number;
  +coserecipient_headers: (a: number) => number;
  +headermap_set_content_type: (a: number, b: number) => void;
  +__wbg_countersignature_free: (a: number) => void;
  +cosesign_payload: (a: number, b: number) => void;
  +cosesign1_payload: (a: number, b: number) => void;
  +coseencrypt_ciphertext: (a: number, b: number) => void;
  +coserecipient_ciphertext: (a: number, b: number) => void;
  +headermap_init_vector: (a: number, b: number) => void;
  +headermap_set_init_vector: (a: number, b: number, c: number) => void;
  +__wbg_coserecipient_free: (a: number) => void;
  +__wbg_taggedcbor_free: (a: number) => void;
  +taggedcbor_to_bytes: (a: number, b: number) => void;
  +taggedcbor_from_bytes: (a: number, b: number) => number;
  +taggedcbor_tag: (a: number) => number;
  +taggedcbor_value: (a: number) => number;
  +taggedcbor_new: (a: number, b: number) => number;
  +__wbg_cborarray_free: (a: number) => void;
  +cborarray_to_bytes: (a: number, b: number) => void;
  +cborarray_from_bytes: (a: number, b: number) => number;
  +cborarray_new: () => number;
  +cborarray_len: (a: number) => number;
  +cborarray_get: (a: number, b: number) => number;
  +cborarray_add: (a: number, b: number) => void;
  +cborarray_set_definite_encoding: (a: number, b: number) => void;
  +cborarray_is_definite: (a: number) => number;
  +__wbg_cborobject_free: (a: number) => void;
  +cborobject_to_bytes: (a: number, b: number) => void;
  +cborobject_from_bytes: (a: number, b: number) => number;
  +cborobject_new: () => number;
  +cborobject_len: (a: number) => number;
  +cborobject_insert: (a: number, b: number, c: number) => number;
  +cborobject_get: (a: number, b: number) => number;
  +cborobject_keys: (a: number) => number;
  +cborobject_set_definite_encoding: (a: number, b: number) => void;
  +cborobject_is_definite: (a: number) => number;
  +__wbg_cborspecial_free: (a: number) => void;
  +cborspecial_to_bytes: (a: number, b: number) => void;
  +cborspecial_from_bytes: (a: number, b: number) => number;
  +cborspecial_new_bool: (a: number) => number;
  +cborspecial_new_unassigned: (a: number) => number;
  +cborspecial_new_break: () => number;
  +cborspecial_new_null: () => number;
  +cborspecial_new_undefined: () => number;
  +cborspecial_kind: (a: number) => number;
  +cborspecial_as_bool: (a: number) => number;
  +cborspecial_as_float: (a: number, b: number) => void;
  +cborspecial_as_unassigned: (a: number) => number;
  +__wbg_cborvalue_free: (a: number) => void;
  +cborvalue_to_bytes: (a: number, b: number) => void;
  +cborvalue_from_bytes: (a: number, b: number) => number;
  +cborvalue_new_int: (a: number) => number;
  +cborvalue_new_bytes: (a: number, b: number) => number;
  +cborvalue_new_text: (a: number, b: number) => number;
  +cborvalue_new_array: (a: number) => number;
  +cborvalue_new_object: (a: number) => number;
  +cborvalue_new_tagged: (a: number) => number;
  +cborvalue_new_special: (a: number) => number;
  +cborvalue_from_label: (a: number) => number;
  +cborvalue_kind: (a: number) => number;
  +cborvalue_as_int: (a: number) => number;
  +cborvalue_as_bytes: (a: number, b: number) => void;
  +cborvalue_as_text: (a: number, b: number) => void;
  +cborvalue_as_array: (a: number) => number;
  +cborvalue_as_object: (a: number) => number;
  +cborvalue_as_tagged: (a: number) => number;
  +cborvalue_as_special: (a: number) => number;
  +__wbg_cosesign1builder_free: (a: number) => void;
  +cosesign1builder_new: (a: number, b: number, c: number, d: number) => number;
  +cosesign1builder_hash_payload: (a: number) => void;
  +cosesign1builder_set_external_aad: (a: number, b: number, c: number) => void;
  +cosesign1builder_make_data_to_sign: (a: number) => number;
  +cosesign1builder_build: (a: number, b: number, c: number) => number;
  +cosesignbuilder_new: (a: number, b: number, c: number, d: number) => number;
  +cosesignbuilder_make_data_to_sign: (a: number) => number;
  +cosesignbuilder_build: (a: number, b: number) => number;
  +__wbg_eddsa25519key_free: (a: number) => void;
  +eddsa25519key_new: (a: number, b: number) => number;
  +eddsa25519key_set_private_key: (a: number, b: number, c: number) => void;
  +eddsa25519key_is_for_signing: (a: number) => void;
  +eddsa25519key_is_for_verifying: (a: number) => void;
  +eddsa25519key_build: (a: number) => number;
  +cosesignbuilder_hash_payload: (a: number) => void;
  +__wbg_cosesignbuilder_free: (a: number) => void;
  +cosesignbuilder_set_external_aad: (a: number, b: number, c: number) => void;
  +__wbg_bignum_free: (a: number) => void;
  +bignum_to_bytes: (a: number, b: number) => void;
  +bignum_from_bytes: (a: number, b: number) => number;
  +bignum_from_str: (a: number, b: number) => number;
  +bignum_to_str: (a: number, b: number) => void;
  +bignum_checked_mul: (a: number, b: number) => number;
  +bignum_checked_add: (a: number, b: number) => number;
  +bignum_checked_sub: (a: number, b: number) => number;
  +__wbg_int_free: (a: number) => void;
  +int_new: (a: number) => number;
  +int_new_negative: (a: number) => number;
  +int_new_i32: (a: number) => number;
  +int_is_positive: (a: number) => number;
  +int_as_positive: (a: number) => number;
  +int_as_negative: (a: number) => number;
  +int_as_i32: (a: number, b: number) => void;
  +__wbindgen_malloc: (a: number) => number;
  +__wbindgen_realloc: (a: number, b: number, c: number) => number;
  +__wbindgen_add_to_stack_pointer: (a: number) => number;
  +__wbindgen_free: (a: number, b: number) => void;
}
/**
 * If `module_or_path` is {RequestInfo} or {URL}, makes a request and
 * for everything else, calls `WebAssembly.instantiate` directly.
 * @param {InitInput | Promise<InitInput>} module_or_path
 * @returns {Promise<InitOutput>}
 */
declare export default function init(
  module_or_path?: InitInput | Promise<InitInput>
): Promise<InitOutput>;
